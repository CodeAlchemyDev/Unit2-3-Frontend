{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\nconst [errorState, setErrorState] = useState({\n  userName: \"\",\n  password: \"\"\n}); // validation on input change\n\nexport default function validate(formSchema, e, errorState, setErrorState) {\n  yup.reach(formSchema, e.target.name).validate(e.target.value).then(valid => {\n    setErrorState({ ...errorState,\n      [e.target.name]: \"\"\n    });\n  }).catch(err => {\n    setErrorState({ ...errorState,\n      [e.target.name]: err.errors[0]\n    });\n  });\n}","map":{"version":3,"sources":["/Users/amber/Lambda/03_Web Applications II/04_unit-3-build/Unit2-3-Frontend/schoolinthecloud/src/helpers/validateForm.js"],"names":["React","useState","useEffect","yup","errorState","setErrorState","userName","password","validate","formSchema","e","reach","target","name","value","then","valid","catch","err","errors"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC;AAC3CK,EAAAA,QAAQ,EAAE,EADiC;AAE3CC,EAAAA,QAAQ,EAAE;AAFiC,CAAD,CAA5C,C,CAKA;;AACA,eAAe,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,CAA9B,EAAiCN,UAAjC,EAA6CC,aAA7C,EAA4D;AACzEF,EAAAA,GAAG,CACAQ,KADH,CACSF,UADT,EACqBC,CAAC,CAACE,MAAF,CAASC,IAD9B,EAEGL,QAFH,CAEYE,CAAC,CAACE,MAAF,CAASE,KAFrB,EAGGC,IAHH,CAGSC,KAAD,IAAW;AACfX,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZ,OAACM,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiB;AAFL,KAAD,CAAb;AAID,GARH,EASGI,KATH,CASUC,GAAD,IAAS;AACdb,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZ,OAACM,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBK,GAAG,CAACC,MAAJ,CAAW,CAAX;AAFL,KAAD,CAAb;AAID,GAdH;AAeD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\n\nconst [errorState, setErrorState] = useState({\n  userName: \"\",\n  password: \"\",\n});\n\n// validation on input change\nexport default function validate(formSchema, e, errorState, setErrorState) {\n  yup\n    .reach(formSchema, e.target.name)\n    .validate(e.target.value)\n    .then((valid) => {\n      setErrorState({\n        ...errorState,\n        [e.target.name]: \"\",\n      });\n    })\n    .catch((err) => {\n      setErrorState({\n        ...errorState,\n        [e.target.name]: err.errors[0],\n      });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}